import { MutableRefObject } from 'react';
import { ComputePositionReturn, VirtualElement } from '@floating-ui/react-dom';
import type { FloatingContext, Middleware, Placement, Strategy } from './types';
declare type Data = Omit<ComputePositionReturn, 'x' | 'y'> & {
    x: number | null;
    y: number | null;
};
export declare type UseFloatingReturn = Data & {
    update: () => void;
    reference: (node: Element | VirtualElement | null) => void;
    floating: (node: HTMLElement | null) => void;
    refs: {
        reference: MutableRefObject<Element | VirtualElement | null>;
        floating: MutableRefObject<HTMLElement | null>;
    };
};
export interface Props {
    open: boolean;
    onOpenChange: (open: boolean) => void;
    placement: Placement;
    middleware: Array<Middleware>;
    strategy: Strategy;
    nodeId: string;
}
export declare function useFloating({ open, onOpenChange, placement, middleware, strategy, nodeId, }?: Partial<Props>): UseFloatingReturn & {
    context: FloatingContext;
};
export * from '@floating-ui/react-dom';
export { useInteractions } from './useInteractions';
export { safePolygon } from './safePolygon';
export { FloatingPortal } from './FloatingPortal';
export { FloatingOverlay } from './FloatingOverlay';
export { FloatingTree, FloatingNode, useFloatingNodeId, useFloatingParentNodeId, useFloatingTree, } from './FloatingTree';
export { FloatingDelayGroup, useDelayGroup, useDelayGroupContext, } from './FloatingDelayGroup';
export { useRole } from './hooks/useRole';
export { useClick } from './hooks/useClick';
export { useDismiss } from './hooks/useDismiss';
export { useId } from './hooks/useId';
export { useFocus } from './hooks/useFocus';
export { useFocusTrap } from './hooks/useFocusTrap';
export { useHover } from './hooks/useHover';
export { useListNavigation } from './hooks/useListNavigation';
export { useTypeahead } from './hooks/useTypeahead';
